#!/bin/bash 
# WARNING: Does not work with Systemd, only OpenRC/Upstart compatible.
#
# Copyright 2009-11  David Woodfall <dave@dawoodfall.net>
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. FURTHERMORE I AM NOT LIABLE IF
# YOUR DATA IS DESTROYED, YOUR HOUSE BURNS DOWN OR YOUR DOG RUNS OFF.
#
# This script allows you to start and stop services in /etc/rc.d/ 

init() {
    trap "cleanup >/dev/null" HUP INT ABRT QUIT SEGV TERM KILL
    cd /etc/rc.d || { echo "Failed to change directory."; exit 1; }
    VERSION=0.1.0
    D_SETTINGS=/tmp/service_options
    D_REPLY=/tmp/dialog_reply
    S_REPLY=/tmp/service_reply
    S_OUTPUT=/tmp/service_output
    RC_LIST=/tmp/rc_list
    RC_OPTIONS=/tmp/rc_options
    RC_CHOICE=/tmp/rc_choice
}

get_services() {
    tags=$(ls rc.* | sed '/.conf/d' | sed '/.orig/d' | sed '/modules/d' \
    | sed '/rc.0/d' | sed '/rc.4/d' | sed '/rc.6/d' | sed '/rc.K/d' \
    | sed '/rc.M/d' | sed '/rc.S/d' | sed '/.new/d')
}

chooser_dialog() {
    get_services
    rm -f $D_SETTINGS
    rm -f $D_REPLY
    let counter=0
    let wc=100/`echo $tags | wc -w`

    (
    for i in $tags
    do
        echo -n $i" " >> $D_SETTINGS
        if [ -x $i ]; then
        {
            echo "\"$(ls -l $i | awk '{print $1}')  Autostart\" on " >> $D_SETTINGS
            set_progress_bar
        }   
        else
        {
            echo "\"$(ls -l $i | awk '{print $1}')  No Autostart\" off " >> $D_SETTINGS
            set_progress_bar
        }
        fi
        set_progress_bar
    done
    ) | dialog --title "System Services" --gauge "Loading Services List..." 35 85
    
    dialog --title "System Services" --cancel-label "Main Menu" --checklist \
    "Use spacebar to change executable permissions and OK to apply" 35 85 28 \
    --file $D_SETTINGS 2> $D_REPLY
}

set_progress_bar() {
    echo $counter 
    echo "XXX"
    echo "Loading Services List..."
    echo "XXX"
    let counter+=$wc
    if [ $counter -gt 100 ]; then let counter=100; fi
}

set_states() {
    for i in $tags
    do
        if [ ! -x $i ]; then
            if grep -q $i $D_REPLY ; then
                chmod +x $i
            fi
        else
            if ! grep -q $i $D_REPLY ; then
                chmod -x $i
            fi
        fi
    done
}

cleanup() {
    echo "Cleaning up..."
    rm -f $D_SETTINGS
    rm -f $D_REPLY
    rm -f $S_REPLY
    rm -f $S_OUTPUT
    rm -f $RC_LIST
    rm -f $RC_OPTIONS
    rm -f $RC_CHOICE
    exit 0
}

main_menu() {
    rm -f $D_REPLY

    while ( true )
    do
        dialog --title "System Services" --cancel-label "Exit" --menu "Select a task from the services menu" 15 85 8 \
        "Permissions" "View and edit service script permissions and autostart options" \
        "Services" "Services controller" \
        "Help" "Help and information about using this script" 2> $D_REPLY
        
        if [ $? -eq 1 ]; then break; fi
        
        reply=$(cat $D_REPLY)
        if [ $reply == "Permissions" ]; then
                autostarted
        fi
        if [ $reply == "Services" ]; then
            service_select
        fi
        if [ $reply == "Help" ]; then
            help
        fi
    done

}

autostarted() {
    while ( true )
    do
        chooser_dialog
        if [ $? -eq 0 ]; then
            set_states
        else
            break
        fi
    done
}

service_select() {
    get_services
    rm -f $RC_LIST
    rm -f $RD_REPLY
    
    let counter=0
    let wc=100/`echo $tags | wc -w`

    (
    for i in $tags
    do
        if [ -x $i ]; then
        {
            rm -f $RC_OPTIONS
            if [[ $(grep -i "usage" $i | grep -w "start") ]]; then echo -n "start" > $RC_OPTIONS ; fi
            if [[ $(grep -i "usage" $i | grep "stop") ]]; then echo -n "|stop" >> $RC_OPTIONS ; fi
            if [[ $(grep -i "usage" $i | grep "restart") ]]; then echo -n "|restart" >> $RC_OPTIONS ; fi
            if [[ $(grep -i "usage" $i | grep "reload") ]]; then echo -n "|reload" >> $RC_OPTIONS ; fi
            if [[ $(grep -i "usage" $i | grep "status") ]]; then echo -n "|status" >> $RC_OPTIONS ; fi
            
            # No usage defined. Put in some exceptions.
            if [[ $i == "rc.gpm" || $i == "rc.atalk" || $i == "rc.pcmcia" || $i == "rc.samba" ]]; then
                echo -n "start|stop|restart" > $RC_OPTIONS
            elif [[ $i == "rc.serial" ]]; then
                    echo -n "start|stop" > $RC_OPTIONS
            elif [[ $i == "rc.inet1" ]]; then
                    echo -n "Network Services" > $RC_OPTIONS
            fi
            
            echo -n $i " \"" >> $RC_LIST
            if [ -r $RC_OPTIONS ]; then cat $RC_OPTIONS >> $RC_LIST ; fi
            echo -n "\" " >> $RC_LIST
            set_progress_bar
        }
        fi
        set_progress_bar
    done
    ) | dialog --title "System Services" --gauge "Loading Services List..." 35 85 0

    while (true)
    do
        dialog --title "System Services" --cancel-label "Main Menu" --menu \
        "Services and available options. Select a service." 35 85 28 --file $RC_LIST 2> $D_REPLY

        if [ $? == "0" ]; then service_control
            else
            return
        fi
    done
}

standard_dialog() {
    dialog --title "System Services" --cancel-label "Back" \
    --menu "Select an option for $(cat $D_REPLY)" 35 85 28 --file $RC_CHOICE 2> $S_REPLY

    if [ $? == "1" ]; then return 1; fi
    reply=$(cat $S_REPLY)

        if [[ $reply == "start" ]]; then {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Starting $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
        elif [[ $reply == "stop" ]]; then {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Stopping $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
        elif [[ $reply == "restart" && $rcfile == "rc.sshd" ]]; then {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Reloading $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
        elif [[ $reply == "restart" ]]; then {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Restarting $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
        elif [[ $reply == "reload" ]]; then  {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Reloading $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
        elif [[ $reply == "status" ]]; then {
    ./$(cat $D_REPLY) $(cat $S_REPLY) > $S_OUTPUT 2>&1 
    dialog --title "Status of $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85 
    }
    fi
    return 0
}

service_control() {
    while ( true )
    do
        rm -f $RC_CHOICE
        rm -f $RC_OPTIONS
        touch $RC_CHOICE $RC_OPTIONS

        rcfile=$(cat $D_REPLY)
        # No usage defined or some special cases. Put in some exceptions.
        if [[ $rcfile == "rc.gpm" || $rcfile == "rc.atalk" || $rcfile == "rc.pcmcia" || $rcfile == "rc.samba" ]]; then
        {
            echo -n "start" "\"start the service\"" "stop" "\"stop the service\"" \
            "restart" "\"restart the service\"" > $RC_CHOICE
            standard_dialog
            if [ $? == "1" ]; then return; fi
        }

        elif [[ $rcfile == "rc.serial" ]]; then
        {
            echo -n "start" "\"start the service\"" "stop" "\"stop the service\"" > $RC_CHOICE
            standard_dialog
            if [ $? == "1" ]; then return; fi
        }
        #  network inet1 stuff
        elif [ $rcfile == "rc.inet1" ]; then 
        {
            echo "start" "\"full network start\"" >> $RC_CHOICE
            echo "stop" "\"full network stop\"" >> $RC_CHOICE
            echo "restart" "\"full network restart\"" >> $RC_CHOICE
            eth_list=$(ifconfig -a | grep eth | awk '{print $1}')
            wlan_list=$(ifconfig -a | grep wlan | awk '{print $1}')
            for i in $eth_list
            do
                echo ${i}_start "\"start this interface\"" >> $RC_CHOICE
                echo ${i}_stop "\"stop this interface\"" >> $RC_CHOICE
                echo ${i}_restart "\"restart this interface\"" >> $RC_CHOICE
            done
            for i in $wlan_list
            do
                echo ${i}_start "\"start this interface\"" >> $RC_CHOICE
                echo ${i}_stop "\"stop this interface\"" >> $RC_CHOICE
                echo ${i}_restart "\"restart this interface\"" >> $RC_CHOICE
            done
                echo "\"status\"" "\"View network status\"" >> $RC_CHOICE
                echo "\"scanner\"" "\"Scan for wifi networks\"" >> $RC_CHOICE
            dialog --title "Network Services" --cancel-label "Back" \
            --menu "Select an option for $(cat $D_REPLY)" 35 85 28 --file $RC_CHOICE 2> $S_REPLY
            
            if [ $? == "1" ]; then return; fi

            reply=$(cat $S_REPLY)
            if [ $reply == "status" ]; then
            {
                ifconfig > $S_OUTPUT
                # need some formatting to look better
                iwconfig 2>&1 | sed "/doesn/d" | sed "s/Security mode/\n          Security mode/g" | \
                sed "/no wireless/d" | sed "/^$/d" >> $S_OUTPUT 
                dialog --title "Network Status" --exit-label "OK" --msgbox "$(cat $S_OUTPUT)" 35 85
            }
            elif [ $reply == "scanner" ]; then
            {
                iwlist scan  2>&1 | sed "/doesn/d" | sed "/^$/d" > $S_OUTPUT
                dialog --title "Wifi Scanner" --exit-label "OK" --msgbox "$(cat $S_OUTPUT)" 35 85
            }
            elif [[ $reply == "start" || $reply == "stop" || $reply == "restart" ]]; then 
            {
                echo "Running "$(cat $D_REPLY) $reply > $S_OUTPUT 2>&1 
                echo "" >> $S_OUTPUT 
                echo "Please Wait..." >> $S_OUTPUT 
                echo "" >> $S_OUTPUT 
                ./$(cat $D_REPLY) $reply >> $S_OUTPUT 2>&1 
                echo "" >> $S_OUTPUT 
                ifconfig >> $S_OUTPUT 2>&1 
                iwconfig 2>&1 | sed "/doesn/d" | sed "s/Security mode/\n          Security mode/g" | \
                sed "/no wireless/d" | sed "/^$/d" >> $S_OUTPUT 
                # seems up/down scrolling in tailbox is borked so play with a couple of msgboxen
                dialog --title "Network Services" --exit-label "OK" --timeout 1 --msgbox \
                "Running $(cat $D_REPLY) $reply\n\nPlease Wait..." 35 85 2>/dev/null
                dialog --title "Network Services" --exit-label "OK" --msgbox "$(cat $S_OUTPUT)" 35 85
            }
            else
            {
                echo "Running "$(cat $D_REPLY) $reply > $S_OUTPUT 2>&1 
                echo "" >> $S_OUTPUT 
                echo "Please Wait..." >> $S_OUTPUT 
                echo "" >> $S_OUTPUT 
                ./$(cat $D_REPLY) $reply >> $S_OUTPUT 2>&1 
                echo "" >> $S_OUTPUT 
                ifconfig $(echo $reply | awk -F_ '{print $1}') >> $S_OUTPUT 2>&1 
                dialog --title "Network Services" --exit-label "OK" --timeout 1 --msgbox \
                "Running $(cat $D_REPLY) $reply\n\nPlease Wait..." 35 85 2>/dev/null
                dialog --title "Network Services" --exit-label "OK" --msgbox "$(cat $S_OUTPUT)" 35 85
            }
            fi
        }
        else
        {
            if [[ $(grep -i "usage" $(cat $D_REPLY) | grep -w "start") ]]; then {
                    echo -n "start" > $RC_OPTIONS; st="start \"Start the service\""; } fi
            if [[ $(grep -i "usage" $(cat $D_REPLY) | grep "stop") ]]; then {
                    echo -n "|stop" >> $RC_OPTIONS; sp="stop \"Stop the service\""; } fi
            if [[ $(grep -i "usage" $(cat $D_REPLY) | grep "restart") ]]; then {
                    echo -n "|restart" >> $RC_OPTIONS; rs="restart \"Restart the service\""; } fi
            if [[ $(grep -i "usage" $(cat $D_REPLY) | grep "reload") ]]; then {
                    echo -n "|reload" >> $RC_OPTIONS; rl="reload \"Reload settings\""; } fi
            if [[ $(grep -i "usage" $(cat $D_REPLY) | grep "status") ]]; then {
                    echo -n "|status" >> $RC_OPTIONS; ss="status \"See status\""; } fi
            echo -n $st $sp $rs $rl $ss > $RC_CHOICE
            
            if [ "$(cat $RC_OPTIONS)" == "" ]; then 
            { 
                dialog --title "System Services" --yesno \
                    "\n         Could not find any options for this service.\n          Run it anyway?" 35 85

                if [ $? == "0" ]; then 
                    {
                        ./$rcfile > $S_OUTPUT 2>&1
                        dialog --title "Starting $rcfile" --msgbox "$(cat $S_OUTPUT)" 35 85
                        return
                    }
                else
                    return
                fi
            } 
            else
            {
                standard_dialog
                if [ $? == "1" ]; then return; fi
            }
            fi
        }
        fi

    done
}

help() {
    dialog --title "Help and Information" --msgbox "chkservice script $VERSION written by David Woodfall (aka dive)\n\nThis script allows you to start and stop services in /etc/rc.d/\n\nThe Permissions Menu allows you to chmod the service scripts. Once executable, a service script will autorun at boot up.\n\nOnce a service script is executable you may run it or check status etc. via the Services Controller Menu. Only executable service scripts will show in the Service Controller Menu.\n\nI have tried to support as many service scripts as I can, but if you have one that isn't working please contact me so I can add a rule for it. I can be found in ##slackware on irc.freenode.net or email dave@unrealize.co.uk\n\nHomepage http://www.unrealize.co.uk" 35 85
}

init
main_menu
cleanup > /dev/null
